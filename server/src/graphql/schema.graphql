# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User
  user(id: Int!): User
  surveys: [Survey!]!
  accounts: [Account]
  account(id: Int!): Account

  survey(surveyId: Int!): Survey
  exchangeRequests(id: Int): [ExchangeRequest]
  exchangeRequest(id: Int): ExchangeRequest
  #exchangeReqest (requestID: Int!): ExchangeRequest
  #exchangeRequests: [ExchangeRequest!]!
}

type Mutation {
  # Records an answer to a survey question presented in class.
  answerSurvey(input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion(surveyId: Int!): Survey

  #create an request for currency exchange
  createRequest(input: ExchangeRequestInput!): Boolean!

  # Update account balance
  updateBalance(input: AccountInput!): Boolean!

  createAccount(input: AccountInfo!): Boolean!

  createUser(input: UserInput!): Int!


}

type Subscription {
  surveyUpdates(surveyId: Int!): Survey
  accountUpdates(userId: Int!): Account
  requestUpdates(userId: Int!): ExchangeRequest
}

type User {
  id: Int!
  userType: UserType!
  email: String!
  name: String!
  account: [Account!]
}

type Account {
  id: Int!
  country: String!
  type: AccountType!
  balance: Float!
  name: String
  user: User!
}

input AccountInfo {
  country: String!
  type: AccountType!
  balance: Float!
  name: String!
  userId: Int!
}

#might need ID for each user later.
type ExchangeRequest {
  requestId: Int!
  amountWant: Float!
  bidRate: Float!
  amountPay: Float!
  currentRate: Float!
  fromCurrency: String!
  toCurrency: String!
  check: Boolean
  user: User
}

#type Transaction {
#  partner1: [ExchangeRequest!]
#  partner2: [ExchangeRequest!]
#}

#type TransactionHistory {
#  History: [Transaction]!
#}

enum UserType {
  ADMIN
  USER
}

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}

input AccountInput {
  id: Int!
  balance: Float!
}

input UserInput {
  userType: UserType!
  email: String!
  name: String!
  password: String!
}

input ExchangeRequestInput {
  amountWant: Float!
  bidRate: Float!
  amountPay: Float!
  currentRate: Float!
  fromCurrency: String!
  toCurrency: String!
}

enum AccountType {
  INTERNAL
  EXTERNAL
}
